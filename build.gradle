plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "checkstyle"
    id "net.raphimc.class-token-replacer" version "1.0.0"
}

base {
    java.toolchain.languageVersion = JavaLanguageVersion.of(8)
    compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

    archivesName = project.maven_name
    group = project.maven_group
    version = project.maven_version
}

configurations {
    include

    implementation.extendsFrom include
    api.extendsFrom include
}

repositories {
    mavenCentral()
    maven {
        name = "lenni0451"
        url = "https://maven.lenni0451.net/everything"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
    maven {
        name = "sonatype snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    //ivy { //include "waterfall:1.19:504@jar"
    //    url "https://papermc.io/api/v2/projects"
    //    patternLayout {
    //        artifact "/[organisation]/versions/[module]/builds/[revision]/downloads/[organisation]-[module]-[revision].[ext]"
    //    }
    //    metadataSources {
    //        artifact()
    //    }
    //}
}

dependencies {
    if (new File(projectDir, "libs").exists()) { //Include all jars in the libs folder
        include fileTree(include: ["*.jar"], dir: "libs")
    }

    implementation "com.google.code.findbugs:jsr305:3.0.2"
    //include "net.lenni0451:Reflect:1.0.0"

    testImplementation(platform("org.junit:junit-bom:5.10.1"))
    testImplementation "org.junit.jupiter:junit-jupiter"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"    
}

sourceSets {
    main {
        classTokenReplacer {
            //Replace all instances of '${version}' with the project version
            property("\${version}", project.version)
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

processResources {
    //Config file: "version: ${version}"
    inputs.properties(
            "version": project.maven_version
    )

    filesMatching("config.yml") {
        expand(
                "version": project.maven_version
        )
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

jar {
    dependsOn configurations.include
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.include.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }

    manifest {
        attributes(
                "Main-Class": "net.lenni0451.gradletemplate.Main",
                "Multi-Release": "true"
        )
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    maxParallelForks Runtime.runtime.availableProcessors()
}

publishing {
    repositories {
        maven {
            name = "reposilite"
            def releasesUrl = "https://maven.lenni0451.net/releases"
            def snapshotsUrl = "https://maven.lenni0451.net/snapshots"
            url = project.maven_version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
        maven {
            name = "ossrh"
            def releasesUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = project.maven_version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId = project.maven_name
            groupId = project.maven_group
            version = project.maven_version

            from components.java

            pom {
                name = rootProject.name
                description = "A template for gradle projects"
                url = "https://github.com/Lenni0451/GradleTemplate"
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/Lenni0451/GradleTemplate/blob/main/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "Lenni0451"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/Lenni0451/GradleTemplate.git"
                    developerConnection = "scm:git:ssh://github.com/Lenni0451/GradleTemplate.git"
                    url = "github.com/Lenni0451/GradleTemplate"
                }
            }
        }
    }
}

checkstyle {
    toolVersion = "9.3" //Latest version for Java 8
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
}

signing {
    setRequired false
    sign configurations.archives
    sign publishing.publications.maven
}

project.tasks.withType(PublishToMavenRepository).forEach {
    it.dependsOn(project.tasks.withType(Sign))
}
build.dependsOn(test)
build.dependsOn(check)
